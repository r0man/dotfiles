;; -*- lisp -*-
(require :stumpwm)
(require :swank)

(in-package :stumpwm)

;; Don't show startup message.
(setf *startup-message* nil)

;; Message bar
(set-fg-color "white")
(set-bg-color "black")
(set-border-color "black")

;; Mode Line
(setf *mode-line-background-color* "black")
(setf *mode-line-foreground-color* "white")
(setf *mode-line-border-color* "black")
(setf *mode-line-timeout* 1)

(setf *screen-mode-line-format*
      (list "[^B%n^b] %W | %g | "
            '(:eval (stumpwm:run-shell-command "date" t))))

;; Use thin window border.
(setf *window-border-style* :thin)

;; Input focus follows the mouse on click.
(setf *mouse-focus-policy* :click)

(defun start-swank-server ()
  (swank-loader:init)
  (swank:create-server
   :port 4005
   :style swank:*communication-style*
   :dont-close t))

;; PREFIX KEY
;; (set-prefix-key (kbd "s-,"))

(set-prefix-key (kbd "s-e"))

;; GROUPS

(run-commands
 "grename Emacs"
 "gnewbg Web"
 "gnewbg Top")

;; Switch to groups with S-[1-9]
(loop for workspace from 1 to 9 do
  (define-key *top-map* (kbd (format nil "s-~d" workspace))
    (format nil "gselect ~d" workspace)))

;; MODULES

;; Modules

(set-module-dir (pathname-as-directory (concat (getenv "HOME") "/workspace/stumpwm")))

(load-module "ttf-fonts")
;; (load-module "winner-mode")
;; (load-module "globalwindows")
;; (load-module "amixer")
;; (load-module "swm-gaps")
;; (load-module "kbd-layouts")

;; Rule Based Window Placement

(define-frame-preference "Emacs"
  (0 t t :class "Emacs"))

(define-frame-preference "Web"
  (1 t t :class "Chromium"))

(define-frame-preference "Top"
  (2 t t :class "htop"))

;;; COMMANDS

(defcommand terminal () ()
  "Run or raise the urxvt terminal."
  (run-or-raise "urxvt -e screen" '(:class "URxvt")))

(defcommand terminal-new () ()
  "Run or raise the urxvt terminal."
  (vsplit)
  (fnext)
  (run-shell-command "urxvt"))

;; (defcommand (fprev tile-group) () ()
;;   "Cycle through the frame tree to the prev frame."
;;   (focus-prev-frame (current-group)))

;; (defcommand file-manager () ()
;;   "Run or raise the file manager."
;;   (run-or-raise "nautilus" '(:class "Nautilus")))

(defcommand htop () ()
  "Run htop."
  (run-or-raise "urxvt -e htop" '(:class "htop")))

;; (defcommand volume-lower () ()
;;   "Lower the volume."
;;   (message "Lower volume"))

;; (defcommand volume-raise () ()
;;   "Raise the volume."
;;   (message "Raise volume"))

;; (defcommand volume-toggle () ()
;;   "Toggle the volume."
;;   (message "Toggle volume"))

;; Polybar

(defun polybar-groups ()
  "Return string representation for polybar stumpgroups module"
  (concatenate
   'string
   (apply #'concatenate 'string
          (mapcar
           (lambda (g)
             (let* ((name (group-name g))
                    (n-win (write-to-string (length (group-windows g))))
                    (display-text (cond ((string-equal name "TXT") "   TXT ")
                                        ((string-equal name "Web") "   Web ")
                                        ((string-equal name "EXT") "   EXT ")
                                        ((string-equal name "FLT") "   FLT ")
                                        (t (concat "   " name "  ")))))
               (if (eq g (current-group))
                   (concat "%{F#FFFFFF B#000000 u#54728E +u}" display-text "[" n-win "] " "%{F- B- u- -u}")
                   (concat "%{F#FFFFFF}" display-text "[" n-win "] " "%{F-}"))))
           (sort (screen-groups (current-screen)) #'< :key #'group-number)))
   " " (if-let (window (current-window)) (window-title window))))

(add-hook *new-window-hook* (lambda (win) (run-shell-command "polybar-msg hook stumpwmgroups 1")))
(add-hook *destroy-window-hook* (lambda (win) (run-shell-command "polybar-msg hook stumpwmgroups 1")))
(add-hook *focus-window-hook* (lambda (win lastw) (run-shell-command "polybar-msg hook stumpwmgroups 1")))
(add-hook *focus-group-hook* (lambda (grp lastg) (run-shell-command "polybar-msg hook stumpwmgroups 1")))

(defun shift-windows-forward (frames win)
  (when frames
    (let ((frame (car frames)))
      (shift-windows-forward (cdr frames)
                             (frame-window frame))
      (when win
        (pull-window win frame)))))

(defcommand rotate-windows () ()
  "Rotate windows"
  (let* ((frames (group-frames (current-group)))
         (win (frame-window (car (last frames)))))
    (shift-windows-forward frames win)))

(defcommand swap-windows () ()
  (let* ((group (current-group))
         (cur-frame (tile-group-current-frame group))
         (frames (group-frames group)))
    (if (eq (length frames) 2)
        (progn (if (or (neighbour :left cur-frame frames)
                       (neighbour :right cur-frame frames))
                   (progn
                     (only)
                     (vsplit))
                   (progn
                     (only)
                     (hsplit))))
        (message "Works only with 2 frames"))))

(define-key *root-map* (kbd "c") "terminal-new")
(define-key *root-map* (kbd "C-c") "terminal-new")

;; ;; Enable the mode line
;; (mode-line)

;; (resize-head 0 0 0 2880 1700)

;; ;;; KEY BINDINGS

(define-key *top-map* (kbd "s-RET") "rotate-windows")
(define-key *top-map* (kbd "C-s-RET") "swap-windows")
(define-key *top-map* (kbd "s-k") "other")

;; ;; Move focus to the next window.
;; (define-key *top-map* (kbd "s-j") "fnext")

;; ;; Move focus to the previous window.
;; (define-key *top-map* (kbd "s-k") "fprev")

;; (refresh-heads)

(run-shell-command "emacs")
(run-shell-command "chromium")
(run-shell-command "polybar example --reload")

(start-swank-server)
