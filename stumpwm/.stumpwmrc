;; -*- lisp -*-
(in-package :stumpwm)

;; Interesting StumpWM configs on the web:
;; - https://github.com/lepisma/cfg/blob/master/stumpwm/.stumpwmrc
;; - https://github.com/herbertjones/my-stumpwm-config

(load "~/.stumpwm.d/commands.lisp")
(load "~/.stumpwm.d/time.lisp")

;; Don't show startup message.
(setf *startup-message* nil)

;; Modules

(set-module-dir (pathname-as-directory (concat (getenv "HOME") "/workspace/stumpwm-contrib")))

(load-module "battery-portable")
(load-module "cpu")
(load-module "globalwindows")
(load-module "mem")
(load-module "pass")
(load-module "screenshot")
(load-module "wifi")

;; Colors

(setf *colors*
      '("#111111"   ; 0 black
        "#dc322f"   ; 1 red
        "#859900"   ; 2 green
        "#b58900"   ; 3 yellow
        "#268bd2"   ; 4 blue
        "#d33682"   ; 5 magenta
        "#2aa198"   ; 6 cyan
        "#fdf6e3")) ; 7 white

(set-float-focus-color "#54728e")

(update-color-map (current-screen))

;; Fonts

(set-font "-*-terminus-medium-*-*-*-17-*-*-*-*-*-*-*")

;; Debug

(setf *debug-level* 10)
(redirect-all-output (data-dir-file "debug" "log"))

;; Message bar
(set-fg-color "white")
(set-bg-color "#111111")
(set-border-color "white")

;; Message Window

(setf *message-window-gravity* :center
      *message-window-padding* 15
      *message-window-y-padding* 15)

;; Set the default gravity for transient/pop-up windows.
(set-transient-gravity :center)

;; Input Window

(setf *input-window-gravity* :center)

(setf *normal-border-width* 1)

;; Number of pixels to increment by when interactively resizing frames.

(set-resize-increment 30)

;; Mode Line

(setf *mode-line-background-color* "black")
(setf *mode-line-foreground-color* "white")
(setf *mode-line-border-color* "black")
(setf *mode-line-timeout* 1)

(defvar modeline-fg-grey
  "^(:fg \"#aaaaaa\")")

(defvar modeline-fg-white
  "^(:fg \"#ffffff\")")

(setf *screen-mode-line-format*
      (list "[^B%n^b] %W | %g ^> %C | %M | BAT: %B | %I"
            " | " modeline-fg-grey '(:eval (current-time-sao-paulo)) modeline-fg-white
            " | " modeline-fg-grey '(:eval (current-time-utc)) modeline-fg-white
            " | " '(:eval (current-time-berlin))
            " | " '(:eval (current-date))))

(run-commands "mode-line")

;; Use thin window border.
(setf *window-border-style* :thin)

;; Input focus follows the mouse on click.
(setf *mouse-focus-policy* :click)
;; (setf *mouse-focus-policy* :sloppy) ??

;; GROUPS

(run-commands
 "grename Emacs"
 "gnewbg Web"
 "gnewbg 3"
 "gnewbg 4"
 "gnewbg 5"
 "gnewbg 6"
 "gnewbg Slack"
 "gnewbg Logs"
 "gnewbg Top")

;; Rule Based Window Placement

;; (define-frame-preference "Emacs"
;;   (0 t t :class "Emacs"))

(define-frame-preference "Web"
  (1 t t :class "Chromium"))

(define-frame-preference "Slack"
  (7 nil t :class "Slack"))

(define-frame-preference "Logs"
  (8 nil t :instance "Logs"))

(define-frame-preference "Top"
  (9 nil t :instance "HTop"))

;; Key Bindings

;; (set-prefix-key (kbd "C-t"))
(set-prefix-key (kbd "s-t"))
;; (set-prefix-key (kbd "s-SPC"))

(define-key *root-map* (kbd "!") "rofi-run")
(define-key *root-map* (kbd "b") "chromium")
(define-key *root-map* (kbd "c") "terminal")
(define-key *root-map* (kbd "e") "emacs-client")
(define-key *root-map* (kbd "w") "rofi-window")

;; (define-key *top-map* (kbd "C-s-RET") "terminal")

;; (define-key *top-map* (kbd "s-RET") "rotate-windows")
;; (define-key *top-map* (kbd "S-s-RET") "swap-windows")

;; (define-key *top-map* (kbd "s-j") "prev")
;; (define-key *top-map* (kbd "s-k") "next")

;; (define-key *top-map* (kbd "s-J") "fprev")
;; (define-key *top-map* (kbd "s-K") "fnext")

;; (define-key *top-map* (kbd "s-m") "rofi-window")
;; (define-key *top-map* (kbd "s-r") "remove-split")

;; Pass Bindings

(defvar *pass-bindings*
  (let ((m (make-sparse-keymap)))
    (define-key m (stumpwm:kbd "c") "pass-copy-menu")
    (define-key m (stumpwm:kbd "g") "pass-generate")
    m))

(define-key *root-map* (kbd "P") '*pass-bindings*)

;; Switch to groups with s-[1-9]
(loop for group from 1 to 9 do
     (define-key *top-map* (kbd (format nil "s-~d" group))
       (format nil "gselect ~d" group)))

;; Set background image. TODO: Used to work with .xprofile, but it stopped working :/
(run-shell-command "feh --bg-scale ~/.dotfiles/wallpapers/stop-customizing-start-working.jpg")

;; Start programs last

(run-commands
 "gselect Web"
 "chromium"
 "gselect Emacs"
 "htop"
 "gselect Logs"
 "logs"
 "gselect Emacs")

;; Centered floating window

(defun with-open-window (cmd props function &rest args)
  "Run a command, setup a handler to apply a function to the new window once it's open."
  (let (handler)
    (setf handler #'(lambda (new-window)
                      (when (apply 'stumpwm::window-matches-properties-p new-window props)
                        (remove-hook *new-window-hook* handler)
                        (setf handler #'(lambda (focused-window last-focused-window)
                                          (declare (ignore last-focused-window))
                                          (when (eq new-window focused-window)
                                            (remove-hook *focus-window-hook* handler)
                                            (apply function new-window args))))
                        (add-hook *focus-window-hook* handler))))
    (add-hook *new-window-hook* handler)
    (run-shell-command cmd)))

(defcommand run-floating-htop () ()
  "Run floating htop"
  (with-open-window
      "urxvt -name floating-htop -e htop"
    '(:instance "floating-htop")
    (lambda (window)
      (let* ((head (current-head))
             (width (/ (head-width head) 2))
             (height (/ (head-height head) 3))
             (x (/ (- (head-width head) width) 2))
             (y (/ (- (head-height head) height) 2)))
        (float-window window (current-group))
        (float-window-move-resize window :x x :y y :width width :height height)))))
